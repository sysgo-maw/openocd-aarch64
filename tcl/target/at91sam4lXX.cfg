# script for ATMEL sam4l, a Cortex-M4 chip
#

source [find target/at91sam4XXX.cfg]

set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME at91sam4l 0x00000000 0 1 1 $_TARGETNAME

# SAM4L SMAP will hold the CPU in reset if TCK is low when RESET_N
# deasserts (see datasheet 42023E-SAM-07/2013 sec 8.11.3).
#
# smap_reset_deassert configures whether we want to run or halt out of reset,
# then instruct the SMAP to let us out of reset.
proc sam4l_reset_handler { phase target { secondary_core 0 } } {
	if [arp_is_tap_enabled $target] {
		if [reset_config_includes srst] {
			if [reset_config_includes srst_nogate] {
				echo "Wrong reset configuration! $target requires 'reset_config srst_gates_jtag'"
			} else {
				arp_reset_plan_srst_dbg_cleared $phase $target
			}
		} else {
			arp_reset_plan_no_srst $phase $target
		}
		switch $phase {
			post {
				at91sam4l smap_reset_deassert
			}
		}
	}
}

set_arp_reset_handler $_TARGETNAME sam4l_reset_handler

# SRST (wired to RESET_N) resets debug circuitry
reset_config srst_gates_jtag

# SAM4L starts from POR with SYSCLK set to 115kHz RCSYS, needs slow JTAG speed.
# Datasheet does not specify SYSCLK to JTAG/SWD clock ratio.
# Usually used SYSCLK/6 is hell slow, testing shows that debugging can work @ SYSCLK/2
# but your mileage may vary.
adapter_khz 50

# System RC oscillator RCSYS starts in 3 cycles
adapter_nsrst_delay 0
